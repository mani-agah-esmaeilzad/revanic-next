// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  avatarUrl String?
  password  String
  bio       String?
  role      String  @default("USER")

  pinnedArticleId Int?     @unique
  pinnedArticle   Article? @relation("PinnedArticle", fields: [pinnedArticleId], references: [id], onDelete: SetNull)

  articles               Article[]             @relation("AuthoredArticles")
  claps                  Clap[]
  comments               Comment[]
  bookmarks              Bookmark[]
  following              Follow[]              @relation("UserFollows")
  followers              Follow[]              @relation("UserFollowedBy")
  notifications          Notification[]        @relation("UserNotifications")
  triggeredNotifications Notification[]        @relation("ActorNotifications")
  subscription           Subscription?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  publications           UsersOnPublications[]
  highlights             Highlight[]

  // --- فیلد جدید برای تاریخچه مطالعه ---
  readingHistory        ReadingHistory[]
  supportTickets        SupportTicket[]
  supportMessages       SupportMessage[]       @relation("SupportMessageAuthor")
  assistantChatSessions AssistantChatSession[]
  seriesFollows         SeriesFollow[]
  curatedSeries         Series[]
}

model Article {
  id              Int     @id @default(autoincrement())
  title           String
  content         String
  readTimeMinutes Int?
  coverImageUrl   String?
  status          String  @default("PENDING")
  author          User    @relation("AuthoredArticles", fields: [authorId], references: [id], onDelete: Cascade)
  authorId        Int
  pinnedByUsers   User[]  @relation("PinnedArticle")

  publication   Publication? @relation(fields: [publicationId], references: [id], onDelete: SetNull)
  publicationId Int?

  categories    Category[]       @relation("ArticleToCategory")
  tags          TagsOnArticles[]
  claps         Clap[]
  comments      Comment[]
  bookmarks     Bookmark[]
  notifications Notification[]
  views         ArticleView[]
  highlights    Highlight[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // --- فیلد جدید برای تاریخچه مطالعه ---
  history       ReadingHistory[]
  seriesEntries SeriesArticle[]
}

model Series {
  id            Int             @id @default(autoincrement())
  slug          String          @unique
  title         String
  subtitle      String?
  description   String?
  coverImageUrl String?
  status        SeriesStatus    @default(DRAFT)
  curator       User?           @relation(fields: [curatorId], references: [id], onDelete: SetNull)
  curatorId     Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  articles      SeriesArticle[]
  followers     SeriesFollow[]
}

model SeriesArticle {
  id        Int       @id @default(autoincrement())
  series    Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId  Int
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  order     Int
  releaseAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([seriesId, articleId])
  @@unique([seriesId, order])
}

model SeriesFollow {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId  Int
  createdAt DateTime @default(now())

  @@unique([userId, seriesId])
}

model SupportTicket {
  id        Int                   @id @default(autoincrement())
  title     String
  status    SupportTicketStatus   @default(OPEN)
  priority  SupportTicketPriority @default(NORMAL)
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  messages  SupportMessage[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model SupportMessage {
  id          Int                      @id @default(autoincrement())
  body        String
  authorRole  SupportMessageAuthorRole
  ticket      SupportTicket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    Int
  author      User?                    @relation("SupportMessageAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  authorId    Int?
  attachments SupportAttachment[]
  createdAt   DateTime                 @default(now())
}

model SupportAttachment {
  id        Int            @id @default(autoincrement())
  url       String
  mimeType  String
  size      Int
  filename  String?
  message   SupportMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  createdAt DateTime       @default(now())
}

model AssistantChatSession {
  id        Int                    @id @default(autoincrement())
  user      User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  status    AssistantChatStatus    @default(ACTIVE)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  messages  AssistantChatMessage[]
  feedback  AssistantChatFeedback?
}

model AssistantChatMessage {
  id        Int                      @id @default(autoincrement())
  session   AssistantChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int
  role      AssistantChatMessageRole
  content   String
  createdAt DateTime                 @default(now())
}

model AssistantChatFeedback {
  id        Int                  @id @default(autoincrement())
  session   AssistantChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int                  @unique
  rating    Int?
  comment   String?
  createdAt DateTime             @default(now())
}

model CommunityStory {
  id               Int          @id @default(autoincrement())
  slug             String       @unique
  title            String
  excerpt          String
  achievement      String?
  quote            String?
  contributorName  String
  contributorRole  String?
  featuredImageUrl String?
  publicationId    Int?
  publication      Publication? @relation(fields: [publicationId], references: [id], onDelete: SetNull)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model EditorialCalendarEntry {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  focus       String
  description String?
  publishDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SupportTicketStatus {
  OPEN
  ANSWERED
  CLOSED
}

enum SupportTicketPriority {
  LOW
  NORMAL
  HIGH
}

enum SupportMessageAuthorRole {
  USER
  ADMIN
}

enum AssistantChatStatus {
  ACTIVE
  COMPLETED
  CLOSED
}

enum AssistantChatMessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum SeriesStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Publication {
  id               Int                   @id @default(autoincrement())
  name             String                @unique
  slug             String                @unique
  description      String?
  avatarUrl        String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  articles         Article[]
  members          UsersOnPublications[]
  communityStories CommunityStory[]
}

model UsersOnPublications {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId Int
  role          String      @default("WRITER")
  assignedAt    DateTime    @default(now())

  @@id([userId, publicationId])
}

model ArticleView {
  id        Int      @id @default(autoincrement())
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  viewedAt  DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  isRead    Boolean  @default(false)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  actor     User?    @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  actorId   Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
}

model Tag {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles TagsOnArticles[]
}

model TagsOnArticles {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([articleId, tagId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleToCategory")
}

model Follow {
  followerId  Int
  followingId Int
  follower    User @relation("UserFollowedBy", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Clap {
  id        Int      @id @default(autoincrement())
  count     Int      @default(1)
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
}

model Bookmark {
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, articleId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  userId    Int
  articleId Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  parentId  Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
}

model Subscription {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  tier             String
  status           String
  studentIdCardUrl String?
  endDate          DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
}

model Highlight {
  id        Int      @id @default(autoincrement())
  text      String
  domId     String   @unique
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@index([articleId])
  @@index([userId])
}

model ReadingHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  viewedAt  DateTime @updatedAt

  @@unique([userId, articleId])
}
