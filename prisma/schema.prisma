// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum حذف شد چون SQLite از آن پشتیبانی نمی‌کند

// ================== MODELS ==================

model User {
  id                     Int            @id @default(autoincrement())
  email                  String         @unique
  name                   String?
  password               String
  bio                    String?
  role                   String         @default("USER") // 'USER' or 'ADMIN'
  articles               Article[]
  claps                  Clap[]
  comments               Comment[]
  bookmarks              Bookmark[]
  following              Follow[]       @relation("UserFollows")
  followers              Follow[]       @relation("UserFollowedBy")
  notifications          Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("ActorNotifications")
  subscription           Subscription?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  publications           UsersOnPublications[]
  highlights             Highlight[]
}

model Article {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  coverImageUrl String?
  status        String         @default("PENDING") // 'PENDING', 'APPROVED', 'REJECTED'
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int
  categories    Category[]     @relation("ArticleToCategory")
  tags          TagsOnArticles[]
  claps         Clap[]
  comments      Comment[]
  bookmarks     Bookmark[]
  notifications Notification[]
  views         ArticleView[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publication   Publication?   @relation(fields: [publicationId], references: [id], onDelete: SetNull)
  publicationId Int?
  highlights    Highlight[]
}

model Publication {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  slug        String                @unique
  description String?
  avatarUrl   String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  articles    Article[]
  members     UsersOnPublications[]
}

model UsersOnPublications {
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  publication   Publication       @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId Int
  role          String            @default("WRITER") // <-- تغییر از PublicationRole به String
  assignedAt    DateTime          @default(now())

  @@id([userId, publicationId])
}

// ... بقیه مدل‌ها بدون هیچ تغییری باقی می‌مانند ...

model ArticleView {
  id        Int      @id @default(autoincrement())
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  viewedAt  DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  isRead    Boolean  @default(false)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  actor     User?    @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  actorId   Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
}

model Tag {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles TagsOnArticles[]
}

model TagsOnArticles {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([articleId, tagId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleToCategory")
}

model Follow {
  followerId  Int
  followingId Int
  follower    User @relation("UserFollowedBy", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Clap {
  id        Int      @id @default(autoincrement())
  count     Int      @default(1)
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
}

model Bookmark {
  userId    Int
  articleId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, articleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Subscription {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  tier              String
  status            String
  studentIdCardUrl  String?
  endDate           DateTime?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
}

model Highlight {
  id        Int      @id @default(autoincrement())
  
  // برای ذخیره متن دقیق هایلایت شده
  text      String   
  
  // برای ذخیره اطلاعات مکان هایلایت در متن
  // ما از یک شناساگر منحصر به فرد (UUID) که در فرانت‌اند تولید می‌شود استفاده خواهیم کرد
  domId     String   @unique

  // روابط
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  createdAt DateTime @default(now())

  @@index([articleId])
  @@index([userId])
}