// src/lib/email.ts
interface SeriesReleaseEmailPayload {
  to: string;
  recipientName: string;
  seriesTitle: string;
  articleTitle: string;
  articleUrl: string;
}

interface EmailResult {
  delivered: boolean;
  id?: string;
  error?: string;
}

const RESEND_API_KEY = process.env.RESEND_API_KEY;
const RESEND_FROM_EMAIL = process.env.RESEND_FROM_EMAIL ?? 'no-reply@revanic.local';

export async function sendSeriesReleaseEmail(payload: SeriesReleaseEmailPayload): Promise<EmailResult> {
  if (!RESEND_API_KEY) {
    console.info('[EMAIL] RESEND_API_KEY ØªÙ†Ø¸ÛŒÙ… Ù†Ø´Ø¯Ù‡ Ø§Ø³Øª. Ù¾ÛŒØ§Ù… Ø²ÛŒØ± Ø§Ø±Ø³Ø§Ù„ Ù†Ø´Ø¯:', payload);
    return { delivered: false, error: 'RESEND_API_KEY missing' };
  }

  const response = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${RESEND_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      from: RESEND_FROM_EMAIL,
      to: payload.to,
      subject: `Ù‚Ø³Ù…Øª Ø¬Ø¯ÛŒØ¯ Ø³Ø±ÛŒ ${payload.seriesTitle}`,
      html: `
        <p>Ø³Ù„Ø§Ù… ${payload.recipientName} Ø¹Ø²ÛŒØ²ØŒ</p>
        <p>Ù‚Ø³Ù…Øª ØªØ§Ø²Ù‡â€ŒØ§ÛŒ Ø§Ø² Ø³Ø±ÛŒ <strong>${payload.seriesTitle}</strong> Ø¨Ø§ Ø¹Ù†ÙˆØ§Ù†
        Â«${payload.articleTitle}Â» Ù…Ù†ØªØ´Ø± Ø´Ø¯Ù‡ Ø§Ø³Øª.</p>
        <p>Ø¨Ø±Ø§ÛŒ Ù…Ø·Ø§Ù„Ø¹Ù‡ Ù‚Ø³Ù…Øª Ø¬Ø¯ÛŒØ¯ØŒ <a href="${payload.articleUrl}">Ø§ÛŒÙ†Ø¬Ø§ Ú©Ù„ÛŒÚ© Ú©Ù†ÛŒØ¯</a>.</p>
        <p>Ø¨Ø§ Ø¢Ø±Ø²ÙˆÛŒ Ù…Ø·Ø§Ù„Ø¹Ù‡â€ŒØ§ÛŒ Ù„Ø°Øªâ€ŒØ¨Ø®Ø´ ðŸ’š</p>
      `,
    }),
  });

  if (!response.ok) {
    const error = await response.text();
    console.error('[EMAIL] Resend error', error);
    return { delivered: false, error };
  }

  const json = (await response.json().catch(() => ({}))) as { id?: string };
  return { delivered: true, id: json.id };
}
